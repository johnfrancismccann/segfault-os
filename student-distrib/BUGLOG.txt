Team SegFault Bug Log

1:
SYMPTOM:    Boot fails at LJMP instruction.
TIME SPENT: 6 hours
SOLUTION:   In our LGDT statement, we were loading an incorrect
            value into GDTR.  This caused the jump to go to an
            invalid address, crashing the OS.  By changing the
            GDTR value, we successfully initialized the GDT and
            booted the OS.

2:
SYMPTOM:    General Protection exception is raised repeatedly
TIME SPENT: 30 minutes
SOLUTION:   When initializing the PIC, we failed to mask the interrupts
            before any of the interrupt handlers were created.
            This caused a rogue interrupt to be triggered, which
            called an unwritten handler at an undefined memory
            location, causing an interrupt.  Masking HW interrupts
            fixed the problem.

3:
SYMPTOM:    rtc.S doesn't compile with rtc.c
TIME SPENT:	2 hours
SOLUTION:   The provided makefile compiles .S and .c files into separate
            .o files, which causes the linker to think that functions are
            either undefined or defined multiple times.  By changing
            rtc.S to rtc_asm.S and adding a new header file, rtc_asm.h, 
            we were able to link the assemly and c files to compile into
            one big, happy OS kernel.
			
4:
SYMPTOM:    Keyboard interrupt wasn't processing
TIME SPENT:	1 hour
SOLUTION:   There was an issue caused by the set_interrupt_gate function
			in setup_idt.c, which is called by init_kbd upon input from
			the keyboard (a key being pressed). It turns out that instead
			of sending the KERNEL_CS to the IDT, we were sending the USER_CS.

5:
SYMPTOM:	Attempt to enable paging crashes kernel 
TIME SPENT:	8 hours
SOLUTION:   When the enable_paging function was called from init_paging 
			which is called from kernel.c, the kernel crashes and causes
			the processor to reload the booloader. Within the 
			enable_paging function, inline assembly code is executed. 
			The problem was that we were clobbering the eax register without
			notifying the compiler. After hours of looking through the 
			initialization of the page directory and table, we decided to 
			read the guide to inline assembly, thus revealing the problem.

6. 
SYMPTOM:    RTC interrupt was not functional
TIME SPENT: 1 hour
SOLUTION:   To send the EOI for a slave PIC IRQ, the EOI signal must be
            sent to the master as IRQ2 and to the slave as IRQ - 8.
            Initially, we had sent the raw IRQ number to both PICs, which
            did not re-enable any interrupts, leading to only one occurence
            of the interrupt.


7. 
SYMPTOM:
TIME SPENT:
SOLUTION: