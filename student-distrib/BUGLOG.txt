Team SegFault Bug Log

1:
SYMPTOM:    Boot fails at LJMP instruction.
TIME SPENT: 6 hours
SOLUTION:   In our LGDT statement, we were loading an incorrect
            value into GDTR.  This caused the jump to go to an
            invalid address, crashing the OS.  By changing the
            GDTR value, we successfully initialized the GDT and
            booted the OS.

2:
SYMPTOM:    General Protection exception is raised repeatedly
TIME SPENT: 30 minutes
SOLUTION:   When initializing the PIC, we failed to mask the interrupts
            before any of the interrupt handlers were created.
            This caused a rogue interrupt to be triggered, which
            called an unwritten handler at an undefined memory
            location, causing an interrupt.  Masking HW interrupts
            fixed the problem.

3:
SYMPTOM:    rtc.S doesn't compile with rtc.c
TIME SPENT:	2 hours
SOLUTION:   The provided makefile compiles .S and .c files into separate
            .o files, which causes the linker to think that functions are
            either undefined or defined multiple times.  By changing
            rtc.S to rtc_asm.S and adding a new header file, rtc_asm.h, 
            we were able to link the assemly and c files to compile into
            one big, happy OS kernel.
			
4:
SYMPTOM:    Keyboard interrupt wasn't processing
TIME SPENT:	1 hour
SOLUTION:   There was an issue caused by the set_interrupt_gate function
		in setup_idt.c, which is called by init_kbd upon input from
		the keyboard (a key being pressed). It turns out that instead
		of sending the KERNEL_CS to the IDT, we were sending the USER_CS.

5:
SYMPTOM:	Attempt to enable paging crashes kernel 
TIME SPENT:	8 hours
SOLUTION:   When the enable_paging function was called from init_paging 
		which is called from kernel.c, the kernel crashes and causes
		the processor to reload the booloader. Within the 
		enable_paging function, inline assembly code is executed. 
		The problem was that we were clobbering the eax register without
		notifying the compiler. After hours of looking through the 
		initialization of the page directory and table, we decided to 
		read the guide to inline assembly, thus revealing the problem.

6. 
SYMPTOM:    RTC interrupt was not functional
TIME SPENT: 1 hour
SOLUTION:   To send the EOI for a slave PIC IRQ, the EOI signal must be
            sent to the master as IRQ2 and to the slave as IRQ - 8.
            Initially, we had sent the raw IRQ number to both PICs, which
            did not re-enable any interrupts, leading to only one occurence
            of the interrupt.

7. 
SYMPTOM:    Page fault occurs in terminal driver after holding down backspace
            key and typing a letter (which appears in the middle of the screen)
TIME SPENT: 1 hour
SOLUTION:   The program was unconditionally decrementing the buffer index
            upon a backspace. Therefore, if there were no elements left in the
            buffer, the buffer index would become -1 and so this would be an
            illegal access on the buffer, resulting in a page fault.

8. 
SYMPTOM:    Even after character buffer is full, backspacing allows more characters
            to be typed to screen and stored in buffer.
TIME SPENT: 1 hour
SOLUTION:   The source of this error was that after hitting enter and creating a new
            line, the user is able to backspace and clear the buffer so that more
            characters can be typed in and stored in the buffer. To solve this, 
            logic was implemented so that after hitting enter, backspacing takes the
            user back to the previous cursor location, not the space immediately to
            the left of the cursor.

9. 
SYMPTOM:    When characters scroll off screen, their character positions become
            unavailable.
TIME SPENT: 1 hour
SOLUTION:   Implemented reverse scrolling (scrolling up) to recover characters that
            had already moved off screen when scrolling down. This led to bugs 10
            and 11 (see below).
            
10.
SYMPTOM:    Tab characters were not displaying correctly when scrolling upwards and
            characters not being deleted when backspacing.
TIME SPENT: 1 hour
SOLUTION:   Added special cases when handling tab characters (both typing and 
            deleting). Kept both a counter of characters to print to screen as well
            as a counter of ASCII codes of characters in buffer.
            
11.
SYMPTOM:    First character on screen (top left corner) was not displaying when
            scrolling upwards.
TIME SPENT: 1 hour
SOLUTION:   Loop to print characters back to screen had an incorrect condition
            which led to the loop not reaching the very first location in video
            memory. Correcting the condition removed the off-by-1 error.

12.
SYMPTOM:    
TIME SPENT: 1 hour
SOLUTION:   
      
13.
SYMPTOM:    
TIME SPENT: 1 hour
SOLUTION:   
            
14.
SYMPTOM:    
TIME SPENT: 1 hour
SOLUTION:   
            